import { StatusBar } from "expo-status-bar";
import { useState } from "react";
import {
  StyleSheet,
  Text,
  View,
  Button,
  TextInput,
  FlatList,
} from "react-native";
//FlastList는 ScrollView처럼 모든 리스트를 rendering하는 것이 아니라 보이는 부분만 rendering하게 때문에
//performance 부분에서 이상적이라고 볼 수 있다, 생각해봐라 우리가 1000개의 리스트가 있다고 하면 그 부분이
//보이지 않는데도 rendering 된다고 하면 이상적이지 않기 때문이다

import GoalItem from "./componenet/GoalItem";
import GoalInput from "./componenet/GoalInput";

//View componenet 는 다른 componenet를 hold하는 역활을 한다
export default function App() {
  const [courseGoals, setCourseGoals] = useState([]);
  const [modalIsVisible, setModalIsVisible] = useState(false);

  function startAddGoalHandler() {
    setModalIsVisible(true);
  }

  function endAddGoalHandler() {
    setModalIsVisible(false);
  }

  //만약 이전 state를 의존한 업데이트를 해야 한다고 이런식으로 하는 것을 추천한다
  function addGoalHandler(enteredGoalText) {
    setCourseGoals((currentCourseGoals) => [
      ...currentCourseGoals,
      {
        text: enteredGoalText,
        key: Math.random().toString(),
        id: Math.random().toString(),
      },
    ]);
  }

  function deleteGoalHandler(id) {
    console.log(id);
    setCourseGoals((currentCourseGoals) => {
      return currentCourseGoals.filter((goal) => goal.id !== id);
    });
  }

  return (
    <>
      <StatusBar style="light" />
      <View style={styles.container}>
        <Button
          title="Add new goal"
          color="#5e0acc"
          onPress={startAddGoalHandler}
        />
        {modalIsVisible && (
          <GoalInput
            onAddGoal={addGoalHandler}
            onCancelGoal={endAddGoalHandler}
            visible={modalIsVisible}
          />
        )}
        {/* 여기서 ScrollView를 또 다른 View로 감싸는 이유는 에리어 css가 scrollView에서는 적용이 안되기 때문이다 */}
        <View style={styles.goalBox}>
          {/* //text 박스 자체에 style을 적용하게 되면 round 모양이 엣지에 적용이
        안되는 문제가 발생될 수 있다, //플랫폼 차이 때문에, 그렇기 때문에 View
        태그 안에 Text를 넣고 View에다가 해당 스타일을 적용해야 한다 */}
          <FlatList
            //원래라면 courseGoals의 map을 이용해서 데이터 하나하나 렌더링 해야 하지만
            //Flast List의 data 받아, renderItem 어트리뷰트를 이용하면 이렇게 쉽게 해당 작업을 수행할 수 있다.
            data={courseGoals}
            //itemData is object generated by FlastList, 그래서 각 아이템의 정보는
            //해당 object의 prop의 item으로 접근가능함.
            renderItem={(itemData) => {
              console.log(itemData);
              return (
                <GoalItem
                  text={itemData.item.text}
                  id={itemData.item.id}
                  onDeleteItem={deleteGoalHandler}
                />
              );
            }}
            keyExtractor={(item, index) => {
              return item.id;
            }}
            alwaysBounceVertical={false}
          />
        </View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 50,
    paddingHorizontal: 16,
    backgroundColor: "#1e085a",
  },

  goalBox: {
    flex: 5,
  },
});
